<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>渠唐</title>
  
  <subtitle>SIMPLE CODING</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.66yr.cn/"/>
  <updated>2020-03-03T09:35:48.241Z</updated>
  <id>http://www.66yr.cn/</id>
  
  <author>
    <name>渠鹏坤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务实战——SpringCloud与Feign集成</title>
    <link href="http://www.66yr.cn/2020/03/03/spring-cloud-04/"/>
    <id>http://www.66yr.cn/2020/03/03/spring-cloud-04/</id>
    <published>2020-03-03T08:40:38.000Z</published>
    <updated>2020-03-03T09:35:48.241Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇集成了ZuulGateway和Eureka并进行了测试。在实际场景中，我们肯定会有很多的微服务，而他们之间可能会存在相互调用的关系，那么，如何优雅的处理服务之间的调用问题呢？接下来就是我们要解决的。</p><h3 id="简单的说下Feign"><a href="#简单的说下Feign" class="headerlink" title="简单的说下Feign"></a>简单的说下Feign</h3><p>Feign 是一个声明式REST Web服务客户端，可以处理微服务间的Web服务调用。他是使用注解加接口的形式形成去调用服务的，相对来说不是很难，有兴趣可去<a href="https://github.com/Openfeign/feign" target="_blank" rel="noopener">官方地址</a>了解下。这里不多介绍。</p><h3 id="如何用"><a href="#如何用" class="headerlink" title="如何用"></a>如何用</h3><p>这里我们还是基于之前的Spring cloud demo去改造，老规矩现附上源码地址<a href="https://github.com/qupengkun/spring-cloud-demo.git" target="_blank" rel="noopener">spring cloud demo</a></p><a id="more"></a><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol start="0"><li>这里Consumer与Provider分别代表两个微服务，测试时，使用Controller通过Feign调用Provider。调用流程如下： <b>网关zuul -&gt; consumer -&gt; provider</b></li><li>引入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在Consumer的启动类上增加注解，开启Feign的支持<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure></li><li>在Consumer新增Controller以供测试时调用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kxtop.blog.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.kxtop.blog.consumer.client.ProviderClient;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/feign"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProviderClient providerClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consumer feign get action"</span>);</span><br><span class="line">        <span class="keyword">return</span> providerClient.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"consumer feign post action"</span>);</span><br><span class="line">        <span class="keyword">return</span> providerClient.post();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在Consumer定义Feingn接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kxtop.blog.consumer.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"kxtop-provider"</span>, path = <span class="string">"/api/test-feign"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProviderClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">post</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在Provider中新增REST接口，这里主要用于测试，供Consumer调用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kxtop.blog.provider.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test-feign"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"provider feign get action"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test feign get"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"provider feign post action"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test feign post"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用Postman请求Consumer测试<br>观察得知，Postman请求到网关之后分发到consumer微服务，微服务通过Feign接口调用Provider微服务并接收到返回值，之后原路返回到Consumer。当然，这里只是简单的演示下如何使用Feign，实际生产环境中，使用远不止这么简单，这就需要我们慢慢去摸索了…<br><img src="http://image.blog.kxtop.cn/20200303165439.png" alt="20200303165439"><br><img src="http://image.blog.kxtop.cn/20200303165525.png" alt="20200303165525"><br><img src="http://image.blog.kxtop.cn/20200303165547.png" alt="20200303165547"></li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>到这里，我们的基本框架已经搭建完成，我们用SpringCloud集成了网关（Zuul），还加入了服务发现与注册（Eureka），也演示了微服务间的调用并集成了Feign。</p><p>那么基于以上，我们会发现还是会有些场景没有解决。比如，我的配置都在properties里面，参数都是写死的，到线上后怎样在不重启服务的情况下修改参数？怎样进行灰度发布或金丝雀测试？还有我们的微服务已经通过Feign可以相互调用了，那我怎样监测他们的运行情况？如果出故障时，如何快速的知道并修复？数据量太大，一台扛不住又该如何？在SpringCloud中又如何处理分库分表读写分离？</p><p>别急，后面我们都会讲到…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇集成了ZuulGateway和Eureka并进行了测试。在实际场景中，我们肯定会有很多的微服务，而他们之间可能会存在相互调用的关系，那么，如何优雅的处理服务之间的调用问题呢？接下来就是我们要解决的。&lt;/p&gt;
&lt;h3 id=&quot;简单的说下Feign&quot;&gt;&lt;a href=&quot;#简单的说下Feign&quot; class=&quot;headerlink&quot; title=&quot;简单的说下Feign&quot;&gt;&lt;/a&gt;简单的说下Feign&lt;/h3&gt;&lt;p&gt;Feign 是一个声明式REST Web服务客户端，可以处理微服务间的Web服务调用。他是使用注解加接口的形式形成去调用服务的，相对来说不是很难，有兴趣可去&lt;a href=&quot;https://github.com/Openfeign/feign&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方地址&lt;/a&gt;了解下。这里不多介绍。&lt;/p&gt;
&lt;h3 id=&quot;如何用&quot;&gt;&lt;a href=&quot;#如何用&quot; class=&quot;headerlink&quot; title=&quot;如何用&quot;&gt;&lt;/a&gt;如何用&lt;/h3&gt;&lt;p&gt;这里我们还是基于之前的Spring cloud demo去改造，老规矩现附上源码地址&lt;a href=&quot;https://github.com/qupengkun/spring-cloud-demo.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;spring cloud demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.66yr.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="架构设计" scheme="http://www.66yr.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="spring cloud" scheme="http://www.66yr.cn/tags/spring-cloud/"/>
    
      <category term="Feign" scheme="http://www.66yr.cn/tags/Feign/"/>
    
      <category term="eureka" scheme="http://www.66yr.cn/tags/eureka/"/>
    
      <category term="spring cloud zuul" scheme="http://www.66yr.cn/tags/spring-cloud-zuul/"/>
    
  </entry>
  
  <entry>
    <title>微服务实战——Spring Cloud + Zuul Gateway + Eureka集成</title>
    <link href="http://www.66yr.cn/2020/01/19/spring-cloud-03/"/>
    <id>http://www.66yr.cn/2020/01/19/spring-cloud-03/</id>
    <published>2020-01-19T13:01:33.000Z</published>
    <updated>2020-01-19T15:09:54.351Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇简单说了SpringCloud与Eureka的集成。主要解决了微服务间的服务注册及调用的问题。这一篇集成Zuul，而后结合SpringCloud、Eureka、Zuul环境下进行真实系统联调，帮助更好的对这些组件的理解。毕竟，实战才是学习最快的方法。</p><h2 id="一、聊聊网关"><a href="#一、聊聊网关" class="headerlink" title="一、聊聊网关"></a>一、聊聊网关</h2><p>上篇也提到过，微服务下，各个业务模块都被拆分成相互独立的微服务。虽然注册中心（如Eureka）解决了服务内部的注册发现、健康检查等问题。但是如何与外部服务进行通信又是一个新的问题了。</p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><a id="more"></a><p>某初创公司，刚刚经历了一次大的架构改革。将原有的单体架构分解成了很多的微服务进行独立部署。这些微服务包括用户鉴权系统、订单系统、定时任务系统等等。而原有的JSP也被改造成基于HTML下的静态页面进行前后端分离部署。</p><p>那么问题来了，因为前后端是分开的，前端同学在调用后端不同服务时要定义各种不同的URI进行调用，管理起来太麻烦，而且，这种情况下一旦后端服务邮编，有需要重新对域名进行解析，这也侧面增加了运维同学的工作量。而更可怕的是这又与现在大家都在提倡的DevOps完全相悖了。</p><h2 id="二、说了这么多我用Nginx不就行了么"><a href="#二、说了这么多我用Nginx不就行了么" class="headerlink" title="二、说了这么多我用Nginx不就行了么"></a>二、说了这么多我用Nginx不就行了么</h2><p>是的，用Nginx的确是能帮助解决服务统一入口的问题。但是因为Nginx比较偏运维性质，而且其路由配置全部都是基于配置文件的硬编码方式进行处理。一旦后台服务发生变化，配置也需要及时更改。这样也没有完全解决上述问题。</p><p>这时候，网关的出现让我看到了曙光。通过服务名就可以进行路由转发,熔断限流，日志监控，最主要的是可以开发人员自己通过配置就能轻松实现，不用每次都求运维人员去做解析。这样岂不是也是更符合DevOps了呢。</p><h2 id="三、Zuul"><a href="#三、Zuul" class="headerlink" title="三、Zuul"></a>三、Zuul</h2><h4 id="Zuul简单介绍"><a href="#Zuul简单介绍" class="headerlink" title="Zuul简单介绍"></a>Zuul简单介绍</h4><p>Zuul在英文中是怪兽的意思，寓意看门神兽。由大名鼎鼎的Netflix开源。并被Pivotal集成入Spring Cloud体系。当前流行的为1.X与2.X系列。主要区别为Zuul从2.X系列开始采用非阻塞异步模式,大大提升了其性能。他是基于filter机制进行工作。有统一入口、健康检查、蓝绿部署、金丝雀发布、日志监控、路由转发等功能。也可集成Ribbon、Hystrix增加负载均衡、熔断的功能。</p><h4 id="Zuul架构"><a href="#Zuul架构" class="headerlink" title="Zuul架构"></a>Zuul架构</h4><p><img src="http://image.blog.kxtop.cn/20200119214049.png" alt="20200119214049"></p><h4 id="Spring-Cloud-Zuul"><a href="#Spring-Cloud-Zuul" class="headerlink" title="Spring Cloud Zuul"></a>Spring Cloud Zuul</h4><p>实际开发中可以根据选择去集成Zuul网关。也可直接选择Spring集成好的Spring Cloud Zuul方便更快的使用起来。本篇重点是集成Spring Cloud Zuul。</p><p>关于Spring Cloud Zuul与Netflix Zuul相比还是有些许不一样的。他是基于SpringBoot + Netflix Zuul内核而成，去掉了原有的动态过滤器加载。所以生产环境中还是根据需要自己选择。</p><h2 id="四、话不多说请看代码"><a href="#四、话不多说请看代码" class="headerlink" title="四、话不多说请看代码"></a>四、话不多说请看代码</h2><h4 id="老规矩，附上源码地址SpingCloud-Zuul-Eureka"><a href="#老规矩，附上源码地址SpingCloud-Zuul-Eureka" class="headerlink" title="老规矩，附上源码地址SpingCloud+Zuul+Eureka"></a>老规矩，附上源码地址<a href="https://github.com/qupengkun/spring-cloud-demo/tree/zuul" target="_blank" rel="noopener">SpingCloud+Zuul+Eureka</a></h4><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li><p>还是在原来的spring-cloud-demo（上一篇地址<a href="http://66yr.cn/2020/01/18/spring-cloud-02/" target="_blank" rel="noopener">SpringCloud+Eureka</a>）项目上，右键创建一个新的model.具体步骤不再赘述。创建完成后项目结构如下：<br><img src="http://image.blog.kxtop.cn/20200119215800.png" alt="20200119215800"></p></li><li><p>引入Zuul依赖<br>主要依赖如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入Zuul starter --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!-- 连接Eureka --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建业务模块provider、consumer，方法跟上一步一样。创建后项目结构如下：<br><img src="http://image.blog.kxtop.cn/20200119220736.png" alt="20200119220736"></p><ul><li>其中provider为服务提供者，提供基础服务的微服务</li><li>consumer为服务的主要调用者。下一章会讲服务之间基于接口（Feign）的调用</li></ul></li><li><p>配置Zuul路由转发以及ribbon、hystrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name &#x3D; zuul-gateway</span><br><span class="line">logging.level.org.spring.framework.security &#x3D; INFO</span><br><span class="line">#hystrix设置 时间要大于Ribbon时间总和</span><br><span class="line">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds &#x3D; 90000</span><br><span class="line">eureka.instance.instance-id &#x3D; $&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br><span class="line">eureka.client.serviceUrl.defaultZone &#x3D; http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">#通过eureka发现的服务。使用ribbon</span><br><span class="line">ribbon.ReadTimeout &#x3D; 20000</span><br><span class="line">ribbon.ConnectTimeout &#x3D; 20000</span><br><span class="line">zuul.ignoredServices &#x3D; &#39;*&#39;</span><br><span class="line">#设置不走ribbon的time-out时间</span><br><span class="line">zuul.host.connect-timeout-millis &#x3D; 20000</span><br><span class="line">zuul.host.socket-timeout-millis &#x3D; 20000</span><br><span class="line">#只要访问以&#x2F;api&#x2F;开头的多层目录都可以路由到服务名为kxtop-provider的服务上.</span><br><span class="line">zuul.routes.kxtop-provider.path &#x3D; &#x2F;api&#x2F;**</span><br><span class="line">zuul.routes.kxtop-provider.service-id&#x3D; kxtop-provider</span><br><span class="line">zuul.routes.kxtop-provider.stripPrefix &#x3D; false</span><br><span class="line">#kxtop-consumer配置</span><br><span class="line">zuul.routes.kxtop-consumer.path &#x3D; &#x2F;consumer&#x2F;**</span><br><span class="line">zuul.routes.kxtop-consumer.service-id &#x3D; kxtop-consumer</span><br><span class="line">zuul.routes.kxtop-consumer.stripPrefix &#x3D; false</span><br><span class="line">server.port &#x3D; 4000</span><br><span class="line">management.endpoints.web.exposure.include &#x3D; *</span><br></pre></td></tr></table></figure></li><li><p>创建Zuul启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@EnableDiscoveryClient  &#x2F;&#x2F;作为Eureka发现者</span><br><span class="line">@EnableZuulProxy        &#x2F;&#x2F;开启Zuul</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ZuulGatewayApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ZuulGatewayApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分别配置provider、consumer配置文件及启动类</p><p>  provider</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name &#x3D; kxtop-provider</span><br><span class="line">server.port &#x3D; 5000</span><br><span class="line">eureka.instance.instance-id &#x3D; $&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;eureka.client.serviceUrl.defaultZone &#x3D; http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">logging.level.org.spring.framework.security &#x3D; INFO</span><br><span class="line">server.servlet.context-path &#x3D; &#x2F;api</span><br><span class="line">management.endpoints.web.exposure.include &#x3D; *</span><br><span class="line">-------------------------</span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ProviderApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  consumer</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name &#x3D; kxtop-consumer</span><br><span class="line">server.port &#x3D; 6000</span><br><span class="line">eureka.instance.instance-id &#x3D; $&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;eureka.client.serviceUrl.defaultZone &#x3D; http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line"></span><br><span class="line">logging.level.org.spring.framework.security &#x3D; INFO</span><br><span class="line">server.servlet.context-path &#x3D; &#x2F;consumer</span><br><span class="line">management.endpoints.web.exposure.include &#x3D; *</span><br><span class="line">--------------------------</span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>整体测试</p><ol><li><p>启动Eureka并浏览器打开<code>localhost:8761</code><br><img src="http://image.blog.kxtop.cn/20200119222937.png" alt="20200119222937"></p></li><li><p>分别启动项目Zuul、provider、consumer<br><img src="http://image.blog.kxtop.cn/20200119223556.png" alt="20200119223556"></p><ul><li><p>保证每个服务都正常运行</p></li><li><p>服务端口对照</p><table><thead><tr><th>服务名</th><th>端口号</th></tr></thead><tbody><tr><td>zuul-gateway</td><td>4000</td></tr><tr><td>provider</td><td>5000</td></tr><tr><td>consumer</td><td>6000</td></tr></tbody></table></li></ul></li><li><p>刷新浏览器查看效果（可以看到，服务都已经注册成功且处于UP状态）<br><img src="http://image.blog.kxtop.cn/20200119224623.png" alt="20200119224623"></p></li><li><p>postman测试网关调用</p><ul><li><p>provider模块新建TestGatewayController，并重启provider</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;test-gateway&quot;)</span><br><span class="line">public class TestGatewayController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping</span><br><span class="line">    public String testGateway() &#123;</span><br><span class="line">        return &quot;Hi！ 我是Consumer服务中的TestGatewayController.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问localhost:4000/api/test-gateway</p><p><img src="http://image.blog.kxtop.cn/20200119225241.png" alt="20200119225241"></p></li><li><p>出现上面这句话，访问成功。请注意：我们访问的是localhost的4000端口，也就是配置的Zuul的端口哦，而输出【Hi！ 我是Consumer服务中的TestGatewayController】这句话的方法则是在端口为5000的consumer模块中定义的。这就就证明我们以配置的网关和服务注册发现是正确的。当然你也可以做更多的测试。</p></li></ul></li></ol></li></ul><h3 id="五、后续"><a href="#五、后续" class="headerlink" title="五、后续"></a>五、后续</h3><p>下一篇会针对以上的整合做更加详细的配置，我们会基于ZuulGateway去做更丰富测试（比如provider、consumer模块如果是部署集群网关该怎样处理？他们之间的负载均衡策略又是怎样的？连接超时、恶意访问怎样做熔断限流？服务之间如何调用？），进行接近生产级项目的配置。敬请关注！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇简单说了SpringCloud与Eureka的集成。主要解决了微服务间的服务注册及调用的问题。这一篇集成Zuul，而后结合SpringCloud、Eureka、Zuul环境下进行真实系统联调，帮助更好的对这些组件的理解。毕竟，实战才是学习最快的方法。&lt;/p&gt;
&lt;h2 id=&quot;一、聊聊网关&quot;&gt;&lt;a href=&quot;#一、聊聊网关&quot; class=&quot;headerlink&quot; title=&quot;一、聊聊网关&quot;&gt;&lt;/a&gt;一、聊聊网关&lt;/h2&gt;&lt;p&gt;上篇也提到过，微服务下，各个业务模块都被拆分成相互独立的微服务。虽然注册中心（如Eureka）解决了服务内部的注册发现、健康检查等问题。但是如何与外部服务进行通信又是一个新的问题了。&lt;/p&gt;
&lt;h4 id=&quot;举个栗子&quot;&gt;&lt;a href=&quot;#举个栗子&quot; class=&quot;headerlink&quot; title=&quot;举个栗子&quot;&gt;&lt;/a&gt;举个栗子&lt;/h4&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.66yr.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="架构设计" scheme="http://www.66yr.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Spring Cloud" scheme="http://www.66yr.cn/tags/Spring-Cloud/"/>
    
      <category term="Zuul" scheme="http://www.66yr.cn/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>微服务实战——SpringCloud下的服务发现与注册组件Eureka集成</title>
    <link href="http://www.66yr.cn/2020/01/18/spring-cloud-02/"/>
    <id>http://www.66yr.cn/2020/01/18/spring-cloud-02/</id>
    <published>2020-01-18T14:31:00.000Z</published>
    <updated>2020-01-19T15:06:13.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="聊聊服务发现注册"><a href="#聊聊服务发现注册" class="headerlink" title="聊聊服务发现注册"></a>聊聊服务发现注册</h2><p>服务多，迭代快是微服务的明显特征。那么在快速小版本迭代业务时，如果按照传统的方式发布更新服务，手动的修改一些服务与服务之间的调用关系是非常麻烦且累人的。一个典型的场景可能是，一个微服务升级迭代之后，硬件环境发生改变（IP等的变化）。传统的做法是修改与其有调用关系的微服务调用地址然后一个个重启。这显然是非常麻烦又容易出错的。而服务发现与注册就是帮你把上述一系列的工作给封装好实现自动发现注册的服务去更新。集体为所有的微服务启动时都去注册中心登记，不管是调用者还是服务提供者，都通过注册中心完成服务的发现。这样就大大提升了我们实际工作中的效率问题。</p><h2 id="当前流行的服务发现与注册组件"><a href="#当前流行的服务发现与注册组件" class="headerlink" title="当前流行的服务发现与注册组件"></a>当前流行的服务发现与注册组件</h2><a id="more"></a><p>当前世面的服务注册发现框架很多，比较常见的有Zookeeper、SpringCloudEureka、Consul、Etcd等。这里只做简单介绍。具体还以实际场景做出选择。</p><ul><li>Zookeeper<br>  相信大家对它绝对不会陌生了，非常老牌子的分布式协调服务框架。由Google开源并且是Hadoop和Hbase的重要组件，提供了数据-发布订阅、负载均衡、分布式同步等功能。其内部为命名空间拥有一个树状的内存模型，其中各节点被称为znode。每个znode包含一个路径和与之相关的元数据。</li><li>Consul<br>由HashiCorp基于Go语言开发的支持多数据中心分布式高可用的服务发布和注册服务框架，采用Raft算法保证服务的一致性。详细可查看其<a href="www.consul.io">官网</a>（这里也有Consul与其他类似产品的对比哦）</li><li>Etcd<br>由CoreOS团队发起并开源的项目，Go语言实现，本质上是高可用的分部署K-V数据库。常用做解决服务发现问题。Kubernetes就是使用它作为其数据后端的。</li><li>Eureka<br>由Netflix开源，并被Pivatal集成到SpringCloud中，可以和SpringCloud无缝对接。基于RestfulAPI开发的服务注册与发现组件。但是目前Eureka仅开源到1.x版本，后续版本已经不再开源。</li></ul><h3 id="上述组件的比较"><a href="#上述组件的比较" class="headerlink" title="上述组件的比较"></a>上述组件的比较</h3><table><thead><tr><th>Zookeeper</th><th>Eureka</th><th>Consul</th><th>Etcd</th><th>功能</th></tr></thead><tbody><tr><td>keepalive</td><td>客户主动报心跳</td><td>服务状态，内存，磁盘等</td><td>连接心跳</td><td>健康检查</td></tr><tr><td>N</td><td>Y</td><td>Y</td><td>N</td><td>多数据中心</td></tr><tr><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>SpringCloud集成</td></tr><tr><td>ACL</td><td>NA</td><td>ACL/https</td><td>Https</td><td>安全</td></tr><tr><td>客户端</td><td>Java/Http</td><td>Http/dns</td><td>Http/grpc</td><td>客户端接口</td></tr><tr><td>CP</td><td>AP</td><td>CA</td><td>CP</td><td>CAP</td></tr><tr><td>Paxos</td><td>定制P2P</td><td>Raft</td><td>Raft</td><td>一致性协议</td></tr><tr><td>Y</td><td>N</td><td>Y</td><td>Y</td><td>KV存储</td></tr></tbody></table><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ul><li><p>先附上<a href="https://github.com/qupengkun/spring-cloud-demo/tree/eureka" target="_blank" rel="noopener">GitHub</a>地址</p></li><li><p>具体步骤</p><ul><li><p>使用IDEA创建Maven项目，输入groupID等信息，名称为spring-cloud-demo，选择pom类型<br><img src="http://image.blog.kxtop.cn/FtSGCxFNzEnn7cnEUeXgNZb8Pyfc" alt="create1"></p></li><li><p>主pom文件配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">    &lt;parent&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;cn.kxtop.blog&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;spring-cloud-demo&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">            &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">            &lt;spring-cloud.version&gt;Finchley.SR1&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">            &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                            &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">                            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">                    &lt;&#x2F;dependency&gt;</span><br><span class="line">            &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">                    &lt;exclusions&gt;</span><br><span class="line">                            &lt;exclusion&gt;</span><br><span class="line">                                    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;</span><br><span class="line">                                    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">                            &lt;&#x2F;exclusion&gt;</span><br><span class="line">                    &lt;&#x2F;exclusions&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                    &lt;plugin&gt;</span><br><span class="line">                            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                            &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li><li><p>接下来创建model，packing选择jar，parent选择刚刚创建好的Spring-cloud-demo主项目。model名为eureka</p></li><li><p>eureka pom文件。这里主要引入了Eureka的服务提供者(Eureka Server)依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;groupId&gt;cn.kxtop.blog&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;parent&gt;</span><br><span class="line">   &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">   &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;!-- eureka server --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- 系统监控 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">   &lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;&#x2F;plugin&gt;</span><br><span class="line">       &lt;&#x2F;plugins&gt;</span><br><span class="line">   &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure></li><li><p>在resources目录下创建application.properties配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Eureka支持集群间互相注册，这里为了方便只搭建一台，生产环境中请搭建集群并修改eureka.client.registerWithEureka &#x3D; false eureka.client.fetchRegistry &#x3D; false配置</span><br><span class="line">spring.application.name &#x3D; eureka-registry</span><br><span class="line">logging.level.org.spring.framework.security&#x3D;INFO</span><br><span class="line">eureka.instance.prefer-ip-address &#x3D; true</span><br><span class="line">eureka.client.registerWithEureka &#x3D; false</span><br><span class="line">eureka.client.fetchRegistry &#x3D; false</span><br><span class="line">eureka.server.waitTimeInMsWhenSyncEmpty &#x3D; 0</span><br><span class="line">server.port &#x3D; 8761</span><br></pre></td></tr></table></figure></li><li><p>创建启动类，包名为package cn.kxtop.blog.registry</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置完成，启动main方法。至此SpringCloud集成Eureka就完成了。最后可访问 <code>localhost:8761</code>查看。<br><img src="http://image.blog.kxtop.cn/Fk-hywF5Ckh4vzRroFI68QTFTlbe" alt="file"></p></li></ul></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>下一篇，测试创建业务项目并测试Eureka服务注册与发现。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;聊聊服务发现注册&quot;&gt;&lt;a href=&quot;#聊聊服务发现注册&quot; class=&quot;headerlink&quot; title=&quot;聊聊服务发现注册&quot;&gt;&lt;/a&gt;聊聊服务发现注册&lt;/h2&gt;&lt;p&gt;服务多，迭代快是微服务的明显特征。那么在快速小版本迭代业务时，如果按照传统的方式发布更新服务，手动的修改一些服务与服务之间的调用关系是非常麻烦且累人的。一个典型的场景可能是，一个微服务升级迭代之后，硬件环境发生改变（IP等的变化）。传统的做法是修改与其有调用关系的微服务调用地址然后一个个重启。这显然是非常麻烦又容易出错的。而服务发现与注册就是帮你把上述一系列的工作给封装好实现自动发现注册的服务去更新。集体为所有的微服务启动时都去注册中心登记，不管是调用者还是服务提供者，都通过注册中心完成服务的发现。这样就大大提升了我们实际工作中的效率问题。&lt;/p&gt;
&lt;h2 id=&quot;当前流行的服务发现与注册组件&quot;&gt;&lt;a href=&quot;#当前流行的服务发现与注册组件&quot; class=&quot;headerlink&quot; title=&quot;当前流行的服务发现与注册组件&quot;&gt;&lt;/a&gt;当前流行的服务发现与注册组件&lt;/h2&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.66yr.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring Cloud" scheme="http://www.66yr.cn/tags/Spring-Cloud/"/>
    
      <category term="Eureka" scheme="http://www.66yr.cn/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>微服务实战——微服务架构选型SpringCloud / Dubbo / K8S比较（一）</title>
    <link href="http://www.66yr.cn/2020/01/01/spring-cloud-01/"/>
    <id>http://www.66yr.cn/2020/01/01/spring-cloud-01/</id>
    <published>2020-01-01T13:30:19.000Z</published>
    <updated>2020-01-18T14:31:48.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>大概是三年前，因一些原因公司原项目最初为单体结构部署，所有业务模块都在一个项目里面，而后随着业务的不断膨胀以及模块之间的耦合，导致后面增加或修改一些简单业务时的成本都会变的极大。新入职的同事更是苦不堪言，学习代码的成本极高。基于这些原因，就开始了后面漫长的架构改造旅途。</p><h2 id="这么多微服解决方案，到底选哪个？"><a href="#这么多微服解决方案，到底选哪个？" class="headerlink" title="这么多微服解决方案，到底选哪个？"></a>这么多微服解决方案，到底选哪个？</h2><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p><img src="http://image.blog.kxtop.cn/FpQxe4jUSLnB63KbSK5fbLyd3w2E" alt="file"></p><a id="more"></a><ul><li><p>Motan 微博内部使用的 RPC 框架，于 2016 年对外开源。后来在 Motan Agent 的基础上演化出了 WeiboMesh，这里暂时不展开说<a href="https://github.com/weibocom/motan" target="_blank" rel="noopener">Motan GitHub</a></p></li><li><p>Dubbo 阿里巴巴开源，一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。曾经有很长一段时间未维护，现已贡献至Apache基金会孵化。附上链接<a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">Dubbo官网</a></p></li><li><p>SpringCloud  由Pivotal 公司 2014 年开源，利用 Spring Boot 特性整合了开源行业中优秀的组件（如Netflix相关组件），整体对外提供了一套在微服务架构中服务治理的解决方案。与Dubbo都经常被使用且比较，这次主要是基于SpringCloud基础组件集成</p></li><li><p>Kubernetes 全新的基于容器技术的分布式架构方案。用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful），Kubernetes提供了应用部署，规划，更新，维护的一种机制</p></li></ul><h4 id="2-对比-话不多说，直接上图"><a href="#2-对比-话不多说，直接上图" class="headerlink" title="2.对比(话不多说，直接上图)"></a>2.对比(话不多说，直接上图)</h4><p><img src="http://image.blog.kxtop.cn/Fn4yb3_T6go2elO6j-EJmUBcUwUk" alt="file"></p><h4 id="3-选择"><a href="#3-选择" class="headerlink" title="3.选择"></a>3.选择</h4><p>很幸运的是，上图三种技术栈都有用过。算是各有优劣吧，具体还是要结合实际情况去选择，不过千万注意的是尽量别混搭（如SpringCloud+K8S或SpringCloud+Dubbo这样）</p><p>后面具体会先围绕SpringCloud技术栈展开，而后也会记录下k8s和Dubbo相关的一些东西。这是第一篇，后面开始实战，以上！</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ul><li>关于环境<br><img src="http://image.blog.kxtop.cn/FpnRiiImBLAsx4PVI616zHhuWqvV" alt="file"></li><li>架构图<br><img src="http://image.blog.kxtop.cn/FsdnI8I0V5Iemex4cWmteqVPxCRD" alt="file"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h2&gt;&lt;p&gt;大概是三年前，因一些原因公司原项目最初为单体结构部署，所有业务模块都在一个项目里面，而后随着业务的不断膨胀以及模块之间的耦合，导致后面增加或修改一些简单业务时的成本都会变的极大。新入职的同事更是苦不堪言，学习代码的成本极高。基于这些原因，就开始了后面漫长的架构改造旅途。&lt;/p&gt;
&lt;h2 id=&quot;这么多微服解决方案，到底选哪个？&quot;&gt;&lt;a href=&quot;#这么多微服解决方案，到底选哪个？&quot; class=&quot;headerlink&quot; title=&quot;这么多微服解决方案，到底选哪个？&quot;&gt;&lt;/a&gt;这么多微服解决方案，到底选哪个？&lt;/h2&gt;&lt;h4 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://image.blog.kxtop.cn/FpQxe4jUSLnB63KbSK5fbLyd3w2E&quot; alt=&quot;file&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.66yr.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring Cloud" scheme="http://www.66yr.cn/tags/Spring-Cloud/"/>
    
  </entry>
  
</feed>
