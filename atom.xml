<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>渠唐</title>
  
  <subtitle>SIMPLE CODING</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.66yr.cn/"/>
  <updated>2020-01-18T14:37:19.657Z</updated>
  <id>http://www.66yr.cn/</id>
  
  <author>
    <name>渠鹏坤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务实战——SpringCloud下的服务发现与注册组件Eureka集成</title>
    <link href="http://www.66yr.cn/2020/01/18/spring-cloud-02/"/>
    <id>http://www.66yr.cn/2020/01/18/spring-cloud-02/</id>
    <published>2020-01-18T14:31:00.000Z</published>
    <updated>2020-01-18T14:37:19.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="聊聊服务发现注册"><a href="#聊聊服务发现注册" class="headerlink" title="聊聊服务发现注册"></a>聊聊服务发现注册</h2><p>服务多，迭代快是微服务的明显特征。那么在快速小版本迭代业务时，如果按照传统的方式发布更新服务，手动的修改一些服务与服务之间的调用关系是非常麻烦且累人的。一个典型的场景可能是，一个微服务升级迭代之后，硬件环境发生改变（IP等的变化）。传统的做法是修改与其有调用关系的微服务调用地址然后一个个重启。这显然是非常麻烦又容易出错的。而服务发现与注册就是帮你把上述一系列的工作给封装好实现自动发现注册的服务去更新。集体为所有的微服务启动时都去注册中心登记，不管是调用者还是服务提供者，都通过注册中心完成服务的发现。这样就大大提升了我们实际工作中的效率问题。</p><h2 id="当前流行的服务发现与注册组件"><a href="#当前流行的服务发现与注册组件" class="headerlink" title="当前流行的服务发现与注册组件"></a>当前流行的服务发现与注册组件</h2><p>当前世面的服务注册发现框架很多，比较常见的有Zookeeper、SpringCloudEureka、Consul、Etcd等。这里只做简单介绍。具体还以实际场景做出选择。</p><a id="more"></a><ul><li>Zookeeper<br>  相信大家对它绝对不会陌生了，非常老牌子的分布式协调服务框架。由Google开源并且是Hadoop和Hbase的重要组件，提供了数据-发布订阅、负载均衡、分布式同步等功能。其内部为命名空间拥有一个树状的内存模型，其中各节点被称为znode。每个znode包含一个路径和与之相关的元数据。</li><li>Consul<br>由HashiCorp基于Go语言开发的支持多数据中心分布式高可用的服务发布和注册服务框架，采用Raft算法保证服务的一致性。详细可查看其<a href="www.consul.io">官网</a>（这里也有Consul与其他类似产品的对比哦）</li><li>Etcd<br>由CoreOS团队发起并开源的项目，Go语言实现，本质上是高可用的分部署K-V数据库。常用做解决服务发现问题。Kubernetes就是使用它作为其数据后端的。</li><li>Eureka<br>由Netflix开源，并被Pivatal集成到SpringCloud中，可以和SpringCloud无缝对接。基于RestfulAPI开发的服务注册与发现组件。但是目前Eureka仅开源到1.x版本，后续版本已经不再开源。</li></ul><h3 id="上述组件的比较"><a href="#上述组件的比较" class="headerlink" title="上述组件的比较"></a>上述组件的比较</h3><table><thead><tr><th>Zookeeper</th><th>Eureka</th><th>Consul</th><th>Etcd</th><th>功能</th></tr></thead><tbody><tr><td>keepalive</td><td>客户主动报心跳</td><td>服务状态，内存，磁盘等</td><td>连接心跳</td><td>健康检查</td></tr><tr><td>N</td><td>Y</td><td>Y</td><td>N</td><td>多数据中心</td></tr><tr><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>SpringCloud集成</td></tr><tr><td>ACL</td><td>NA</td><td>ACL/https</td><td>Https</td><td>安全</td></tr><tr><td>客户端</td><td>Java/Http</td><td>Http/dns</td><td>Http/grpc</td><td>客户端接口</td></tr><tr><td>CP</td><td>AP</td><td>CA</td><td>CP</td><td>CAP</td></tr><tr><td>Paxos</td><td>定制P2P</td><td>Raft</td><td>Raft</td><td>一致性协议</td></tr><tr><td>Y</td><td>N</td><td>Y</td><td>Y</td><td>KV存储</td></tr></tbody></table><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ul><li><p>先附上<a href="https://github.com/qupengkun/spring-cloud-demo/tree/eureka" target="_blank" rel="noopener">GitHub</a>地址</p></li><li><p>具体步骤</p><ul><li><p>使用IDEA创建Maven项目，输入groupID等信息，名称为spring-cloud-demo，选择pom类型<br><img src="http://image.blog.kxtop.cn/FtSGCxFNzEnn7cnEUeXgNZb8Pyfc" alt="create1"></p></li><li><p>主pom文件配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">    &lt;parent&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;cn.kxtop.blog&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;spring-cloud-demo&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">            &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">            &lt;spring-cloud.version&gt;Finchley.SR1&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">            &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                            &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">                            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">                    &lt;&#x2F;dependency&gt;</span><br><span class="line">            &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">                    &lt;exclusions&gt;</span><br><span class="line">                            &lt;exclusion&gt;</span><br><span class="line">                                    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;</span><br><span class="line">                                    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">                            &lt;&#x2F;exclusion&gt;</span><br><span class="line">                    &lt;&#x2F;exclusions&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                    &lt;plugin&gt;</span><br><span class="line">                            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                            &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li><li><p>接下来创建model，packing选择jar，parent选择刚刚创建好的Spring-cloud-demo主项目。model名为eureka</p></li><li><p>eureka pom文件。这里主要引入了Eureka的服务提供者(Eureka Server)依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;groupId&gt;cn.kxtop.blog&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;parent&gt;</span><br><span class="line">   &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">   &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;!-- eureka server --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- 系统监控 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">   &lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;&#x2F;plugin&gt;</span><br><span class="line">       &lt;&#x2F;plugins&gt;</span><br><span class="line">   &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure></li><li><p>在resources目录下创建application.properties配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Eureka支持集群间互相注册，这里为了方便只搭建一台，生产环境中请搭建集群并修改eureka.client.registerWithEureka &#x3D; false eureka.client.fetchRegistry &#x3D; false配置</span><br><span class="line">spring.application.name &#x3D; eureka-registry</span><br><span class="line">logging.level.org.spring.framework.security&#x3D;INFO</span><br><span class="line">eureka.instance.prefer-ip-address &#x3D; true</span><br><span class="line">eureka.client.registerWithEureka &#x3D; false</span><br><span class="line">eureka.client.fetchRegistry &#x3D; false</span><br><span class="line">eureka.server.waitTimeInMsWhenSyncEmpty &#x3D; 0</span><br><span class="line">server.port &#x3D; 8761</span><br></pre></td></tr></table></figure></li><li><p>创建启动类，包名为package cn.kxtop.blog.registry</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置完成，启动main方法。至此SpringCloud集成Eureka就完成了。最后可访问 <code>localhost:8761</code>查看。<br><img src="http://image.blog.kxtop.cn/Fk-hywF5Ckh4vzRroFI68QTFTlbe" alt="file"></p></li></ul></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>下一篇，测试创建业务项目并测试Eureka服务注册与发现。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;聊聊服务发现注册&quot;&gt;&lt;a href=&quot;#聊聊服务发现注册&quot; class=&quot;headerlink&quot; title=&quot;聊聊服务发现注册&quot;&gt;&lt;/a&gt;聊聊服务发现注册&lt;/h2&gt;&lt;p&gt;服务多，迭代快是微服务的明显特征。那么在快速小版本迭代业务时，如果按照传统的方式发布更新服务，手动的修改一些服务与服务之间的调用关系是非常麻烦且累人的。一个典型的场景可能是，一个微服务升级迭代之后，硬件环境发生改变（IP等的变化）。传统的做法是修改与其有调用关系的微服务调用地址然后一个个重启。这显然是非常麻烦又容易出错的。而服务发现与注册就是帮你把上述一系列的工作给封装好实现自动发现注册的服务去更新。集体为所有的微服务启动时都去注册中心登记，不管是调用者还是服务提供者，都通过注册中心完成服务的发现。这样就大大提升了我们实际工作中的效率问题。&lt;/p&gt;
&lt;h2 id=&quot;当前流行的服务发现与注册组件&quot;&gt;&lt;a href=&quot;#当前流行的服务发现与注册组件&quot; class=&quot;headerlink&quot; title=&quot;当前流行的服务发现与注册组件&quot;&gt;&lt;/a&gt;当前流行的服务发现与注册组件&lt;/h2&gt;&lt;p&gt;当前世面的服务注册发现框架很多，比较常见的有Zookeeper、SpringCloudEureka、Consul、Etcd等。这里只做简单介绍。具体还以实际场景做出选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.66yr.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring Cloud" scheme="http://www.66yr.cn/tags/Spring-Cloud/"/>
    
      <category term="Eureka" scheme="http://www.66yr.cn/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>微服务实战——微服务架构选型SpringCloud / Dubbo / K8S比较（一）</title>
    <link href="http://www.66yr.cn/2020/01/01/spring-cloud-01/"/>
    <id>http://www.66yr.cn/2020/01/01/spring-cloud-01/</id>
    <published>2020-01-01T13:30:19.000Z</published>
    <updated>2020-01-18T14:31:48.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>大概是三年前，因一些原因公司原项目最初为单体结构部署，所有业务模块都在一个项目里面，而后随着业务的不断膨胀以及模块之间的耦合，导致后面增加或修改一些简单业务时的成本都会变的极大。新入职的同事更是苦不堪言，学习代码的成本极高。基于这些原因，就开始了后面漫长的架构改造旅途。</p><h2 id="这么多微服解决方案，到底选哪个？"><a href="#这么多微服解决方案，到底选哪个？" class="headerlink" title="这么多微服解决方案，到底选哪个？"></a>这么多微服解决方案，到底选哪个？</h2><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p><img src="http://image.blog.kxtop.cn/FpQxe4jUSLnB63KbSK5fbLyd3w2E" alt="file"></p><a id="more"></a><ul><li><p>Motan 微博内部使用的 RPC 框架，于 2016 年对外开源。后来在 Motan Agent 的基础上演化出了 WeiboMesh，这里暂时不展开说<a href="https://github.com/weibocom/motan" target="_blank" rel="noopener">Motan GitHub</a></p></li><li><p>Dubbo 阿里巴巴开源，一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。曾经有很长一段时间未维护，现已贡献至Apache基金会孵化。附上链接<a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">Dubbo官网</a></p></li><li><p>SpringCloud  由Pivotal 公司 2014 年开源，利用 Spring Boot 特性整合了开源行业中优秀的组件（如Netflix相关组件），整体对外提供了一套在微服务架构中服务治理的解决方案。与Dubbo都经常被使用且比较，这次主要是基于SpringCloud基础组件集成</p></li><li><p>Kubernetes 全新的基于容器技术的分布式架构方案。用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful），Kubernetes提供了应用部署，规划，更新，维护的一种机制</p></li></ul><h4 id="2-对比-话不多说，直接上图"><a href="#2-对比-话不多说，直接上图" class="headerlink" title="2.对比(话不多说，直接上图)"></a>2.对比(话不多说，直接上图)</h4><p><img src="http://image.blog.kxtop.cn/Fn4yb3_T6go2elO6j-EJmUBcUwUk" alt="file"></p><h4 id="3-选择"><a href="#3-选择" class="headerlink" title="3.选择"></a>3.选择</h4><p>很幸运的是，上图三种技术栈都有用过。算是各有优劣吧，具体还是要结合实际情况去选择，不过千万注意的是尽量别混搭（如SpringCloud+K8S或SpringCloud+Dubbo这样）</p><p>后面具体会先围绕SpringCloud技术栈展开，而后也会记录下k8s和Dubbo相关的一些东西。这是第一篇，后面开始实战，以上！</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ul><li>关于环境<br><img src="http://image.blog.kxtop.cn/FpnRiiImBLAsx4PVI616zHhuWqvV" alt="file"></li><li>架构图<br><img src="http://image.blog.kxtop.cn/FsdnI8I0V5Iemex4cWmteqVPxCRD" alt="file"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h2&gt;&lt;p&gt;大概是三年前，因一些原因公司原项目最初为单体结构部署，所有业务模块都在一个项目里面，而后随着业务的不断膨胀以及模块之间的耦合，导致后面增加或修改一些简单业务时的成本都会变的极大。新入职的同事更是苦不堪言，学习代码的成本极高。基于这些原因，就开始了后面漫长的架构改造旅途。&lt;/p&gt;
&lt;h2 id=&quot;这么多微服解决方案，到底选哪个？&quot;&gt;&lt;a href=&quot;#这么多微服解决方案，到底选哪个？&quot; class=&quot;headerlink&quot; title=&quot;这么多微服解决方案，到底选哪个？&quot;&gt;&lt;/a&gt;这么多微服解决方案，到底选哪个？&lt;/h2&gt;&lt;h4 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://image.blog.kxtop.cn/FpQxe4jUSLnB63KbSK5fbLyd3w2E&quot; alt=&quot;file&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.66yr.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Spring Cloud" scheme="http://www.66yr.cn/tags/Spring-Cloud/"/>
    
  </entry>
  
</feed>
